<?xml version='1.0'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="connecting">
	<title>Configuring Google Connectivity</title>
	<para>Spring Social&apos;s <classname>ConnectController</classname> 
	works with one or more provider-specific <classname>
	ConnectionFactory</classname>s to exchange authorization details with 
	the provider and to create connections. Spring Social Google provides 
	<classname>GoogleConnectionFactory</classname>, a <classname>
	ConnectionFactory</classname> for creating connections with Google 
	APIs.</para>
	<para>So that <classname>ConnectController</classname> can find 
	<classname>GoogleConnectionFactory</classname>, it must be registered 
	with a <classname>ConnectionFactoryRegistry</classname>. The following 
	class constructs a <classname>ConnectionFactoryRegistry</classname> 
	containing a <interfacename>ConnectionFactory</interfacename> for 
	Google using Spring&apos;s Java configuration style:</para>
	<programlisting language="java">
@Configuration
public class SocialConfig {

    @Inject
    private Environment environment;
	
    @Bean
    public ConnectionFactoryLocator connectionFactoryLocator() {
        ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();
        registry.addConnectionFactory(new GoogleConnectionFactory(
            environment.getProperty(&quot;google.consumerKey&quot;),
            environment.getProperty(&quot;google.consumerSecret&quot;)));
        return registry;
    }

}

	</programlisting>
	<para>Here, a Google connection factory is registered with <classname>
	ConnectionFactoryRegistry</classname> via the <methodname>
	addConnectionFactory()</methodname> method. If we wanted to add 
	support for connecting to other providers, we would simply register 
	their connection factories here in the same way as <classname>
	GoogleConnectionFactory</classname>.</para>
	<para>Because consumer keys and secrets may be different across 
	environments (e.g., test, production, etc) it is recommended that 
	these values be externalized. As shown here, Spring 3.1&apos;s 
	<interfacename>Environment</interfacename> is used to look up the 
	application&apos;s consumer key and secret.</para>
	<para>Optionally, you may also configure <classname>
	ConnectionFactoryRegistry</classname> and <classname>
	GoogleConnectionFactory</classname> in XML:</para>
	<programlisting language="xml">
&lt;bean id=&quot;connectionFactoryLocator&quot; class=&quot;org.springframework.social.connect.support.ConnectionFactoryRegistry&quot;&gt;
    &lt;property name=&quot;connectionFactories&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;org.springframework.social.google.connect.GoogleConnectionFactory&quot;&gt;
                &lt;constructor-arg value=&quot;${google.consumerKey}&quot; /&gt;
                &lt;constructor-arg value=&quot;${google.consumerSecret}&quot; /&gt;				
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
	</programlisting>
	<para>This is functionally equivalent to the Java-based configuration 
	of <classname>ConnectionFactoryRegistry</classname> shown before. The 
	only casual difference is that the connection factories are injected 
	as a list into the <code>connectionFactories</code> property rather 
	than with the <methodname>addConnectionFactory()</methodname> method. 
	As in the Java-based configuration, the application&apos;s consumer 
	key and secret are externalized (shown here as property 
	placeholders).</para>
	<para>Refer to 
	<ulink url="http://static.springsource.org/spring-social/docs/1.0.x/reference/html/connecting.html">
	Spring Social&apos;s reference documentation</ulink> for complete 
	details on configuring <classname>ConnectController</classname> and 
	its dependencies.</para>
</chapter>
