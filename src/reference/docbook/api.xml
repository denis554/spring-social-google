<?xml version='1.0'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="apis">
	<title>Google APIs Binding</title>
	<para>Spring Social Google&apos;s <interfacename>
	Google</interfacename> interface and its implementation, <classname>
	GoogleTemplate</classname> provide the operations needed to interact 
	with Google on behalf of a user. Creating an instance of <classname>
	GoogleTemplate</classname> is as simple as constructing it by passing 
	in an authorized access token to the constructor:</para>
	<programlisting language="java">
String accessToken = &quot;f8FX29g...&quot;; // access token received from Google after OAuth2 authorization
Google google = new GoogleTemplate(accessToken);
	</programlisting>
	<para>In addition, <classname>GoogleTemplate</classname> has a default 
	constructor that creates an instance without any OAuth2 
	credentials:</para>
	<programlisting language="java">
Google google = new GoogleTemplate();
	</programlisting>
	<para>When constructed with the default constructor, <classname>
	GoogleTemplate</classname> will allow a few Google+ operations that do 
	not require authorization, such as retrieving a specific Google+ 
	user&apos;s profile. Attempting other operations, such as creating an 
	app activity will fail with an <classname>
	MissingAuthorizationException</classname> being thrown.</para>
	<para>If you are using Spring Social&apos;s 
	<ulink url="http://static.springsource.org/spring-social/docs/1.1.x/reference/html/serviceprovider.html">
	service provider framework</ulink> , you can get an instance of 
	<interfacename>Google</interfacename> from a <interfacename>
	Connection</interfacename> . For example, the following snippet calls 
	<methodname>getApi()</methodname> on a connection to retrieve a 
	<interfacename>Google</interfacename> :</para>
	<programlisting language="java">
Connection&lt;Google&gt; connection = connectionRepository.findPrimaryConnection(Google.class);
Google google = connection != null ? connection.getApi() : new GoogleTemplate();
	</programlisting>
	<para>Here, <interfacename>ConnectionRepository</interfacename> is 
	being asked for the primary connection that the current user has with 
	Google. If a connection to Google is found, a call to <methodname>
	getApi()</methodname> retrieves a <interfacename>
	Google</interfacename> instance that is configured with the connection 
	details received when the connection was first established. If there 
	is no connection, a default instance of <classname>
	GoogleTemplate</classname> is created.</para>
	<para>With a <interfacename>Google</interfacename> in hand, there are 
	several ways you can use it to interact with Google on behalf of the 
	user. Spring Social&apos;s Google API binding is divided into 4 
	sub-APIs exposes through the methods of <interfacename>
	Google</interfacename> , and a method that lets you fetch the access 
	token to easily integrate with other Java libraries for Google APIs 
	that have no Spring Social binding yet:</para>
	<programlisting language="java">
public interface Google {

    UserInfoOperations userOperations();

    PlusOperations plusOperations();

    TaskOperations taskOperations();

    DriveOperations driveOperations();

	String getAccessToken();

}
	</programlisting>
	<para>The sub-API interfaces returned from <interfacename>
	Google</interfacename> &apos;s methods are described in 
	<xref linkend="table-google-sub-apis"/> .</para>
	<table xml:id="table-google-sub-apis">
		<title>Google&apos;s Sub-APIs</title>
		<tgroup cols="2">
			<colspec align="left"/>
			 
			<colspec colname="col1" colnum="1" colwidth="2*"/>
			 
			<colspec colname="col2" colnum="2" colwidth="2*"/>
			<thead>
				<row>
					<entry align="center">Sub-API Interface</entry>
					<entry align="center">Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>UserInfoOperations</entry>
					<entry>Get the details of the user.</entry>
				</row>
				<row>
					<entry>PlusOperations</entry>
					<entry>Read Google+ activities and people profiles and create app 
					activities.</entry>
				</row>
				<row>
					<entry>TaskOperations</entry>
					<entry>Read and manage the user&apos;s tasks.</entry>
				</row>
				<row>
					<entry>DriveOperations</entry>
					<entry>Read and manage the user&apos;s files in Google 
					Drive.</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>The following sections will give an overview of common tasks 
	that can be performed via <interfacename>Google</interfacename> and 
	its sub-APIs. For complete details on all of the operations available, 
	refer to the JavaDoc.</para>
	<section id="google-userinfo">
		<title>Getting the authenticated user&apos;s details</title>
		<para>You can retrieve the user&apos;s details using <methodname>
		getUserProfile()</methodname> method:</para>
		<programlisting language="java">
GoogleUserInfo userInfo = google.userOperations().getUserInfo();
		</programlisting>
		<para>The <classname>UserInfo</classname> object will contain basic 
		profile information about the authenticating user, including their 
		first and last name and their Google profile ID. Depending on what 
		authorization scope has been granted to the application, it may also 
		include their email address.</para>
	</section>
	<section id="google-people">
		<title>Reading Google+ Profiles</title>
		<para>If you know a user&apos;s Google profile ID, you can get their 
		public profile by calling <methodname>getPerson()</methodname>:</para>
		<programlisting language="java">
Person person =	google.plusOperations().getPerson(&quot;123456789...&quot;);
		</programlisting>
		<para>This operation works without authentication, as it is used to 
		access public profiles. After authentication, it is possible to use 
		&quot;me&quot; instead of a profile ID as argument to the method, or 
		equivalently use the <methodname>getGoogleProfile()</methodname> 
		method to get the authenticated user&apos;s profile.</para>
		<para>To search for public profiles, call the <methodname>
		searchPeople()</methodname> method:</para>
		<programlisting language="java">
PeoplePage people = google.plusOperations().searchPeople(&quot;John Smith&quot;, null);
		</programlisting>
		<para>Or you can get a list of people in the user&apos;s circles by 
		calling <methodname>getPeopleInCircles()</methodname> :</para>
		<programlisting language="java">
PeoplePage people = google.plusOperations().getPeopleInCircles(&quot;me&quot;, null);
		</programlisting>
	</section>
	<section id="google-activities">
		<title>Reading Google+ Activities</title>
		<para>To get a user&apos;s visible activities, call <interfacename>
		PlusOperations</interfacename> &apos; <methodname>
		getActivities()</methodname> method with the user ID as first 
		argument, or &quot;me&quot; for the authenticated user:</para>
		<programlisting language="java">
ActivitiesPage activities = google.plusOperations().getActivities(&quot;123456789...&quot;);
		</programlisting>
		<para>You can search all public activities without authenticating by 
		calling the <methodname>searchPublicActivities()</methodname> 
		methos:</para>
		<programlisting language="java">
ActivitiesPage activities = google.plusOperations().searchPublicActivities(&quot;Spring&quot;, null);
		</programlisting>
	</section>
	<section id="google-moments">
		<title>Managing app activities</title>
		<para>Google+ App activities, or moments, appear in the profile page, 
		and are associated with the application that was used to create them. 
		<interfacename>Moment</interfacename> is an abstract superclass of 
		the specific types of app activities. To post a new app activity, 
		call <methodname>insertMoment()</methodname> with a specific moment 
		implementation:</para>
		<programlisting language="java">
Moment moment = google.plusOperations().insertMoment(new AddActivity(&quot;http://target-url...&quot;));
		</programlisting>
		<para>You can list the moments created by your application by calling 
		<methodname>getMoments()</methodname>:</para>
		<programlisting language="java">
MomentsPage moments = google.plusOperations().getMoments(null);
		</programlisting>
		<para>To delete a moment, call <methodname>
		deleteMoment()</methodname> with the ID which you can fetch from the 
		moment instance:</para>
		<programlisting language="java">
google.plusOperations().deleteMoment(&quot;mf4l2j3ws...&quot;);
		</programlisting>
	</section>
	<section id="google-tasks">
		<title>Managing Tasks</title>
		<para>Depending on the OAuth2 scope, you can access the Google Tasks 
		API either with full access or with read-only access. Tasks are 
		organizad in task lists, and the default task list&apos;s ID is 
		&quot;@default&quot;. To retrieve the user&apos;s task lists, call 
		the <methodname>getTaskLists()</methodname> method:</para>
		<programlisting language="java">
TaskListsPage taskLists = google.taskOperations().getTaskLists();
		</programlisting>
		<para>Create a new task list or update an existing one by calling 
		<methodname>saveTaskList()</methodname>:</para>
		<programlisting language="java">
TaskList taskList = google.taskOperations().saveTaskList(new TaskList(&quot;Todo&quot;));
		</programlisting>
		<para>To retrieve the tasks, call <methodname>
		getTasks()</methodname>:</para>
		<programlisting language="java">
TasksPage tasks = google.taskOperations().getTasks();
		</programlisting>
		<para>Create or update a task by calling <methodname>
		saveTask()</methodname>:</para>
		<programlisting language="java">
Task task = google.taskOperations().saveTask(new Task(&quot;Do or do not&quot;, &quot;There is no try&quot;, new Date()));
		</programlisting>
		<para>If you want to hide all completed tasks in a task list, call 
		<methodname>clearCompletedTasks()</methodname>:</para>
		<programlisting language="java">
TaskList taskList = ... // get or create the task list instance
google.taskOperations().clearCompletedTasks(taskList);
		</programlisting>
	</section>
	<section id="google-drive">
		<title>Managing files in Google Drive</title>
		<para>Google Drive API can be used to upload, manage and download 
		files. Applications can be granted read/write or read-only access to 
		the entire content of the user&apos;s Google Drive account, to file 
		metadata, or just to files created by the application.</para>
		<para>To list the visible files and folders in a folder, call 
		<methodname>getFiles()</methodname> with the folder ID, or 
		&quot;root&quot; to get top-level files and folders:</para>
		<programlisting language="java">
DriveFilesPage files = google.driveOperations().getFiles(&quot;root&quot;, null);
		</programlisting>
		<para>Create a folder by calling <methodname>
		createFolder()</methodname> with the folder ID in which to create the 
		new folder and a name:</para>
		<programlisting language="java">
DriveFile folder = google.driveOperations().createFolder(&quot;root&quot;, &quot;New Folder&quot;);
		</programlisting>
		<para>Uploading files is implemented using Spring&apos;s resource 
		abstraction. When you upload a file, you also define its metadata 
		(name, description, etc&apos;) and upload parameters (whether to 
		convert office files, whether to run OCR, etc&apos;). To upload a 
		file call the <methodname>upload()</methodname> method:</para>
		<programlisting language="java">
Resource resource = new FileSystemResource(&quot;/path/to/file&quot;);  // any Resource implementation can be used
DriveFile metadata = DriveFile.builder()  // use this builder to set metadata
                         .setTitle(&quot;My File&quot;)
                         .build();
UploadParameters parameters = new UploadParameters();  // call setters to modify upload parameters
DriveFile file = google.driveOperations().upload(resource, metadata, parameters);
		</programlisting>
	</section>
</chapter>
